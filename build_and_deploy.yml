---
- name: Build and Deploy Custom Nginx App (via Shell Commands - S2I Strategy)
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    api_server_url: "https://api.cluster-cjrh7.cjrh7.sandbox2962.opentlc.com:6443" # HARDCODED API SERVER URL
    bearer_token: "sha256~9k_q60QYt-oN0KVDqtcSEMxIWARK2FQB1Z642VrlukY" # HARDCODED BEARER TOKEN
    kubeconfig_file_content: |
      apiVersion: v1
      clusters:
      - cluster:
          server: {{ api_server_url }}
          insecure-skip-tls-verify: true # Bypass SSL verification for demo
        name: default-cluster
      contexts:
      - context:
          cluster: default-cluster
          user: default-user
        name: default-context
      current-context: default-context
        users:
      - name: default-user
        user:
          token: {{ bearer_token }}
  tasks:
    - name: Create temporary directory for OCP YAML files
      ansible.builtin.file:
        path: /tmp/ocp_nginx_deploy_shell
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Write kubeconfig file to EE
      ansible.builtin.copy:
        content: "{{ kubeconfig_file_content }}"
        dest: /tmp/ocp_kubeconfig
        mode: '0600'
      delegate_to: localhost
      run_once: true

    - name: Start OpenShift Build for Custom Nginx Image
      ansible.builtin.shell: |
        oc --kubeconfig /tmp/ocp_kubeconfig create -f - <<EOF_BUILD
        apiVersion: build.openshift.io/v1
        kind: BuildConfig
        metadata:
          name: custom-nginx-build
          namespace: aap # YOUR PROJECT NAME
        spec:
          source:
            type: Git
            git:
              uri: https://github.com/kevalmajithia/aap-demo.git
              ref: main
            contextDir: . # Ensure context dir is root of repo
          strategy:
            type: Source # CHANGED STRATEGY TO SOURCE
            sourceStrategy:
              from:
                kind: ImageStreamTag
                # Using a generic S2I builder that might be available
                # This might need to be adjusted based on available builders in your OCP
                name: 'python:3.9-ubi8' # Try a common S2I builder (e.g., Python, NodeJS, or 's2i-base')
                namespace: openshift # S2I builders are usually in 'openshift' namespace
              # If the above doesn't work, try a very generic base like:
              # name: 's2i-base'
              # namespace: openshift
              # If still fails, try to find available S2I builders in your OCP:
              # oc get imagestream -n openshift -l builder=true
            output:
              to:
                kind: ImageStreamTag
                name: custom-nginx-app:latest
            triggers:
              - type: ConfigChange
              - type: ImageChange
                from:
                  kind: ImageStreamTag
                  name: custom-nginx-app:latest
        EOF_BUILD
      args:
        stdin: yes
      changed_when: true
      delegate_to: localhost
      run_once: true
      register: build_output
    - debug: var=build_output.stdout_lines

    # No wait task, rely on manual check

    - name: Deploy Custom Nginx Application
      ansible.builtin.shell: |
        oc --kubeconfig /tmp/ocp_kubeconfig create -f - <<EOF_DEPLOY
        apiVersion: apps/v1
        kind: DeploymentConfig
        metadata:
          name: custom-nginx-app
          namespace: aap # YOUR PROJECT NAME
          labels:
            app: custom-nginx-app
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: custom-nginx-app
          template:
            metadata:
              labels:
                app: custom-nginx-app
            spec:
              containers:
                - name: nginx
                  image: image-registry.openshift-image-registry.svc:5000/aap/custom-nginx-app:latest
                  ports:
                    - containerPort: 8080
                  imagePullPolicy: Always
                  securityContext:
                    runAsNonRoot: true
                    allowPrivilegeEscalation: false
        EOF_DEPLOY
      args:
        stdin: yes
      changed_when: true
      delegate_to: localhost
      run_once: true
      register: deploy_output
    - debug: var=deploy_output.stdout_lines

    - name: Create Nginx Service
      ansible.builtin.shell: |
        oc --kubeconfig /tmp/ocp_kubeconfig create -f - <<EOF_SVC
        apiVersion: v1
        kind: Service
        metadata:
          name: custom-nginx-svc
          namespace: aap # YOUR PROJECT NAME
          labels:
            app: custom-nginx-app
        spec:
          selector:
            app: custom-nginx-app
          ports:
            - protocol: TCP
              port: 8080
              targetPort: 8080
          type: ClusterIP
        EOF_SVC
      args:
        stdin: yes
      changed_when: true
      delegate_to: localhost
      run_once: true
      register: svc_output
    - debug: var=svc_output.stdout_lines

    - name: Create Nginx Route
      ansible.builtin.shell: |
        oc --kubeconfig /tmp/ocp_kubeconfig create -f - <<EOF_ROUTE
        apiVersion: route.openshift.io/v1
        kind: Route
        metadata:
          name: custom-nginx-route
          namespace: aap # YOUR PROJECT NAME
        spec:
          to:
            kind: Service
            name: custom-nginx-svc
          port:
            targetPort: 8080-tcp
          tls:
            termination: edge
            insecureEdgeTerminationPolicy: Redirect
        EOF_ROUTE
      args:
        stdin: yes
      changed_when: true
      delegate_to: localhost
      run_once: true
      register: route_output
    - debug: var=route_output.stdout_lines
